name: CI|CD Pipeline

env:
  ACTIONS_STEP_DEBUG: true

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore

      - name: Format check
        run: dotnet format --verify-no-changes --verbosity normal

      - name: Build
        run: dotnet build src/GameHub.QuizMaster/GameHub.QuizMaster.csproj --configuration Release

      - name: Publish
        run: dotnet publish src/GameHub.QuizMaster/GameHub.QuizMaster.csproj --configuration Release -r linux-x64 --self-contained true --output ./publish/quiz-master/

      - name: Upload project artifact
        uses: actions/upload-artifact@v4
        with:
          name: quiz-master
          path: ./publish/quiz-master/
          
      - name: Upload docker artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker
          path: ./docker/
        
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download project artifacts
        uses: actions/download-artifact@v4
        with:
          name: quiz-master
          path: ./publish/quiz-master/

      - name: Download docker artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker
          path: ./docker/
        
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: List files in working directory
        run: ls -l

      - name: List files in docker directory
        run: ls -l docker

      - name: List files in publish/quiz-master directory
        run: ls -l publish/quiz-master/
          
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/quiz-master:latest -f docker/Dockerfile .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/quiz-master:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker

    env:
      REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      REMOTE_USER: ${{ secrets.REMOTE_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}

    steps:
      - name: Download docker artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker
          path: ./docker/

      - name: Copy docker-compose files to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          source: "./docker/docker-compose.yml"
          target: "~/"

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: |
            export POSTGRES_USER=${{ env.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ env.POSTGRES_DB }}
            export DOCKER_HUB_USERNAME=${{ env.DOCKER_HUB_USERNAME }}
            docker-compose -f ~/docker/docker-compose.yml up -d